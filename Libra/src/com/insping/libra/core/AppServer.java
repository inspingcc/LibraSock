package com.insping.libra.core;import java.io.IOException;import com.insping.Instances;import com.insping.libra.net.codec.LibraDecoder;import com.insping.libra.net.codec.LibraEncoder;import com.insping.log.LibraLog;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelOption;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.codec.LengthFieldBasedFrameDecoder;import io.netty.handler.logging.LogLevel;import io.netty.handler.logging.LoggingHandler;public class AppServer implements Instances {	public static final String IP_ADDRESS = "127.0.0.1";	public static final int PORT = 9050;	public void bind() throws Exception {		// 配置服务端的NIO线程组		EventLoopGroup bossGroup = new NioEventLoopGroup();		EventLoopGroup workerGroup = new NioEventLoopGroup();		ServerBootstrap b = new ServerBootstrap();		b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.SO_BACKLOG, 100)				.handler(new LoggingHandler(LogLevel.INFO)).childHandler(new ChannelInitializer<SocketChannel>() {					@Override					public void initChannel(SocketChannel ch) throws IOException {						ch.pipeline().addLast("frameDecoder", new LengthFieldBasedFrameDecoder(3*1024,0,2));						ch.pipeline().addLast("protobufDecoder", new LibraDecoder());												//ch.pipeline().addLast("frameEncoder", new ProtobufVarint32LengthFieldPrepender());						ch.pipeline().addLast("protobufEncoder", new LibraEncoder());						ch.pipeline().addLast(new LogicServerHandler());					}				});		// 绑定端口，同步等待成功		b.bind(IP_ADDRESS, PORT).sync();		LibraLog.info("Libra server start ok : " + (IP_ADDRESS + " : " + PORT));	}	public static void main(String[] args) throws Exception {		// 日志初始化		LibraLog.init();		// 加载handlers		handlerMgr.register();		// 启动服务器		new AppServer().bind();	}}